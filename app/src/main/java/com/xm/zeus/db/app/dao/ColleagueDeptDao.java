package com.xm.zeus.db.app.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.xm.zeus.db.app.entity.ColleagueDept;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ColleagueDept".
*/
public class ColleagueDeptDao extends AbstractDao<ColleagueDept, String> {

    public static final String TABLENAME = "ColleagueDept";

    /**
     * Properties of entity ColleagueDept.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property No = new Property(0, String.class, "no", true, "NO");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Isdefault = new Property(3, Integer.class, "isdefault", false, "ISDEFAULT");
        public final static Property PersonId = new Property(4, String.class, "personId", false, "PERSON_ID");
    };

    private DaoSession daoSession;

    private Query<ColleagueDept> colleague_PersonDeptsQuery;

    public ColleagueDeptDao(DaoConfig config) {
        super(config);
    }
    
    public ColleagueDeptDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ColleagueDept\" (" + //
                "\"NO\" TEXT PRIMARY KEY NOT NULL ," + // 0: no
                "\"NAME\" TEXT," + // 1: name
                "\"TITLE\" TEXT," + // 2: title
                "\"ISDEFAULT\" INTEGER," + // 3: isdefault
                "\"PERSON_ID\" TEXT NOT NULL );"); // 4: personId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ColleagueDept\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ColleagueDept entity) {
        stmt.clearBindings();
 
        String no = entity.getNo();
        if (no != null) {
            stmt.bindString(1, no);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        Integer isdefault = entity.getIsdefault();
        if (isdefault != null) {
            stmt.bindLong(4, isdefault);
        }
        stmt.bindString(5, entity.getPersonId());
    }

    @Override
    protected void attachEntity(ColleagueDept entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ColleagueDept readEntity(Cursor cursor, int offset) {
        ColleagueDept entity = new ColleagueDept( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // no
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // isdefault
            cursor.getString(offset + 4) // personId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ColleagueDept entity, int offset) {
        entity.setNo(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsdefault(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setPersonId(cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(ColleagueDept entity, long rowId) {
        return entity.getNo();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(ColleagueDept entity) {
        if(entity != null) {
            return entity.getNo();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "personDepts" to-many relationship of Colleague. */
    public List<ColleagueDept> _queryColleague_PersonDepts(String personId) {
        synchronized (this) {
            if (colleague_PersonDeptsQuery == null) {
                QueryBuilder<ColleagueDept> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PersonId.eq(null));
                colleague_PersonDeptsQuery = queryBuilder.build();
            }
        }
        Query<ColleagueDept> query = colleague_PersonDeptsQuery.forCurrentThread();
        query.setParameter(0, personId);
        return query.list();
    }

}
