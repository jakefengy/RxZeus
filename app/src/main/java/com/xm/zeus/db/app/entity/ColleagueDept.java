package com.xm.zeus.db.app.entity;

import com.xm.zeus.db.app.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.xm.zeus.db.app.dao.ColleagueDeptDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "ColleagueDept".
 */
public class ColleagueDept {

    private String no;
    private String name;
    private String title;
    private Integer isdefault;
    /** Not-null value. */
    private String personId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ColleagueDeptDao myDao;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public ColleagueDept() {
    }

    public ColleagueDept(String no) {
        this.no = no;
    }

    public ColleagueDept(String no, String name, String title, Integer isdefault, String personId) {
        this.no = no;
        this.name = name;
        this.title = title;
        this.isdefault = isdefault;
        this.personId = personId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getColleagueDeptDao() : null;
    }

    public String getNo() {
        return no;
    }

    public void setNo(String no) {
        this.no = no;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public Integer getIsdefault() {
        return isdefault;
    }

    public void setIsdefault(Integer isdefault) {
        this.isdefault = isdefault;
    }

    /** Not-null value. */
    public String getPersonId() {
        return personId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPersonId(String personId) {
        this.personId = personId;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
