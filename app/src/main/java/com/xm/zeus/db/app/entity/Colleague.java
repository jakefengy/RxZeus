package com.xm.zeus.db.app.entity;

import java.util.List;

import com.xm.zeus.db.app.dao.DaoSession;

import de.greenrobot.dao.DaoException;

import com.xm.zeus.db.app.dao.ColleagueDao;
import com.xm.zeus.db.app.dao.ColleagueDeptDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "Colleague".
 */
public class Colleague {

    public final static int DATATYPE_COLLEAGUE = 0;

    private String uid;
    private String uno;
    private String username;
    private String sex;
    private String mobile;
    private String email;
    private String avatarid;
    private Integer type;
    private String spelling;
    private String firstletter;
    private Integer dataType = DATATYPE_COLLEAGUE;
    private String headName = "同事";
    private Boolean isCheck = false;
    private Long timestamp;

    /**
     * Used to resolve relations
     */
    private transient DaoSession daoSession;

    /**
     * Used for active entity operations.
     */
    private transient ColleagueDao myDao;

    private List<ColleagueDept> personDepts;

    // KEEP FIELDS - put your custom fields here
    private boolean Enabled = true;
    // KEEP FIELDS END

    public Colleague() {
    }

    public Colleague(String uid) {
        this.uid = uid;
    }

    public Colleague(String uid, String uno, String username, String sex, String mobile, String email, String avatarid, Integer type, String spelling, String firstletter, Integer dataType, String headName, Boolean isCheck, Long timestamp) {
        this.uid = uid;
        this.uno = uno;
        this.username = username;
        this.sex = sex;
        this.mobile = mobile;
        this.email = email;
        this.avatarid = avatarid;
        this.type = type;
        this.spelling = spelling;
        this.firstletter = firstletter;
        this.dataType = dataType;
        this.headName = headName;
        this.isCheck = isCheck;
        this.timestamp = timestamp;
    }

    /**
     * called by internal mechanisms, do not call yourself.
     */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getColleagueDao() : null;
    }

    public String getUid() {
        return uid;
    }

    public void setUid(String uid) {
        this.uid = uid;
    }

    public String getUno() {
        return uno;
    }

    public void setUno(String uno) {
        this.uno = uno;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getSex() {
        return sex;
    }

    public void setSex(String sex) {
        this.sex = sex;
    }

    public String getMobile() {
        return mobile;
    }

    public void setMobile(String mobile) {
        this.mobile = mobile;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getAvatarid() {
        return avatarid;
    }

    public void setAvatarid(String avatarid) {
        this.avatarid = avatarid;
    }

    public Integer getType() {
        return type;
    }

    public void setType(Integer type) {
        this.type = type;
    }

    public String getSpelling() {
        return spelling;
    }

    public void setSpelling(String spelling) {
        this.spelling = spelling;
    }

    public String getFirstletter() {
        return firstletter;
    }

    public void setFirstletter(String firstletter) {
        this.firstletter = firstletter;
    }

    public Integer getDataType() {
        return dataType;
    }

    public void setDataType(Integer dataType) {
        this.dataType = dataType;
    }

    public String getHeadName() {
        return headName;
    }

    public void setHeadName(String headName) {
        this.headName = headName;
    }

    public Boolean getIsCheck() {
        return isCheck;
    }

    public void setIsCheck(Boolean isCheck) {
        this.isCheck = isCheck;
    }

    public Long getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(Long timestamp) {
        this.timestamp = timestamp;
    }

    public boolean isEnabled() {
        return Enabled;
    }

    public void setEnabled(boolean enabled) {
        Enabled = enabled;
    }

    public Boolean getCheck() {
        return isCheck;
    }

    public void setCheck(Boolean check) {
        isCheck = check;
    }

    /**
     * To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity.
     */
    public List<ColleagueDept> getPersonDepts() {
        if (personDepts == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ColleagueDeptDao targetDao = daoSession.getColleagueDeptDao();
            List<ColleagueDept> personDeptsNew = targetDao._queryColleague_PersonDepts(uid);
            synchronized (this) {
                if (personDepts == null) {
                    personDepts = personDeptsNew;
                }
            }
        }
        return personDepts;
    }

    /**
     * Resets a to-many relationship, making the next get call to query for a fresh result.
     */
    public synchronized void resetPersonDepts() {
        personDepts = null;
    }

    /**
     * Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context.
     */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context.
     */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /**
     * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context.
     */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
