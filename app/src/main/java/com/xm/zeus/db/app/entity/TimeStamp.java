package com.xm.zeus.db.app.entity;

import com.xm.zeus.db.app.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.xm.zeus.db.app.dao.TimeStampDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "TimeStamp".
 */
public class TimeStamp {

    public final static String TS_COLLEAGUE = "TS_COLLEAGUE";

    private String ModuleName;
    private long TimeStamp;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TimeStampDao myDao;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public TimeStamp() {
    }

    public TimeStamp(String ModuleName) {
        this.ModuleName = ModuleName;
    }

    public TimeStamp(String ModuleName, long TimeStamp) {
        this.ModuleName = ModuleName;
        this.TimeStamp = TimeStamp;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTimeStampDao() : null;
    }

    public String getModuleName() {
        return ModuleName;
    }

    public void setModuleName(String ModuleName) {
        this.ModuleName = ModuleName;
    }

    public long getTimeStamp() {
        return TimeStamp;
    }

    public void setTimeStamp(long TimeStamp) {
        this.TimeStamp = TimeStamp;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
